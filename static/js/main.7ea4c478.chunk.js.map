{"version":3,"sources":["components/card/card.components.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.components.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","uni","alt","width","children","CardList","monster","map","val","key","id","name","SearchBox","placeHolder","handle","type","placeholder","onChange","App","state","search","fetch","then","res","json","j","setState","m","this","filter","e","toLowerCase","includes","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAUeA,G,kBARN,SAACC,GACN,OACI,yBAAKC,UAAU,YACX,yBAAKC,IAAK,wBAAyBF,EAAMG,IAAI,WAAYC,IAAI,MAAMC,MAAM,SACxEL,EAAMM,YCWJC,EAdF,SAACP,GACb,OACE,yBAAKC,UAAU,aACf,yBAAKA,UAAU,kBAETD,EAAMQ,QAAQC,KAAI,SAACC,GAChB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAIE,GAAIT,IAAKO,EAAIE,IAAKF,EAAIG,YCPlDC,G,MAAU,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,YAAYC,EAAU,EAAVA,OAC1B,OACI,gCACA,2BAAOC,KAAK,SAASC,YAAaH,EAAaI,SAAUH,OC8BlDI,E,YA9Bb,aACC,IAAD,8BACE,+CACKC,MAAM,CACTb,QAAQ,GACRc,OAAO,IAJX,E,iFAQC,IAAD,OACEC,MAAM,8CACLC,MAAK,SAACC,GAAO,OAAOA,EAAIC,UACxBF,MAAK,SAACG,GAAK,OAAO,EAAKC,SAAS,CAACpB,QAAQmB,S,+BAG3C,IAAD,OAEME,EAAEC,KAAKT,MAAMb,QAAQuB,QAAO,SAACC,GAAK,OAAQA,EAAEnB,KAAKoB,cAAeC,SAAU,EAAKb,MAAMC,OAAQW,kBACjG,OACE,6BACE,gCAAQ,iDACT,kBAAC,EAAD,CAAWlB,YAAY,iBAAiBC,OAAQ,SAACgB,GAAK,EAAKJ,SAAS,CAACN,OAAOU,EAAEG,OAAOC,WACpF,kBAAC,EAAD,CAAU5B,QAASqB,S,GAvBTQ,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.7ea4c478.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nvar Card=(props)=>{\n    return(\n        <div className=\"carditem\">\n            <img src={\"https://robohash.org/\"+ props.uni+\"set=set2\"} alt=\"img\" width=\"100%\" />\n            {props.children}\n        </div>\n    );\n};\nexport default Card;","import React from 'react';\nimport './card-list.styles.css'\nimport Card from '../card/card.components'\nvar CardList=(props)=>{\n return(\n   <div className=\"container\">\n   <div className=\"grid-container\">\n      {\n         props.monster.map((val)=>{\n            return <Card key={val.id} uni={val.id}>{val.name}</Card>;\n         })\n      }\n\n   </div>\n   </div>\n )\n};\nexport default CardList;","import React from 'react';\nimport './search-box.styles.css';\nconst SearchBox=({placeHolder,handle})=>{\n    return(\n        <center>\n        <input type=\"search\" placeholder={placeHolder} onChange={handle}/>\n        </center>\n\n    )\n}\nexport {SearchBox};","import React,{Component} from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.components'\nimport {SearchBox} from './components/search-box/search-box.components'\nclass App extends Component{\n  constructor()\n  {\n    super();\n    this.state={\n      monster:[],\n      search:''\n    };\n  }\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((res)=>{return res.json()})\n    .then((j)=>{return this.setState({monster:j})});\n  }\n  render()\n  {\n    \n    var m=this.state.monster.filter((e)=>{return (e.name.toLowerCase()).includes((this.state.search).toLowerCase())});\n    return(\n      <div>\n        <center><h1>Monsters Rolodex</h1></center>\n       <SearchBox placeHolder=\"Search Monster\" handle={(e)=>{this.setState({search:e.target.value})}}/>\n        <CardList monster={m}/>\n      </div>\n      \n    );\n  }\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}